generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id
  name          String
  email         String
  emailVerified Boolean
  image         String?
  createdAt     DateTime
  updatedAt     DateTime
  role          String?
  banned        Boolean?
  banReason     String?
  banExpires    DateTime?
  sessions      Session[]
  accounts      Account[]

  @@unique([email])
  @@map("user")
}

model Session {
  id             String   @id
  expiresAt      DateTime
  token          String
  createdAt      DateTime
  updatedAt      DateTime
  ipAddress      String?
  userAgent      String?
  userId         String
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  impersonatedBy String?

  @@unique([token])
  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime
  updatedAt             DateTime

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime?
  updatedAt  DateTime?

  @@map("verification")
}

model Asset {
  id           String             @id @default(uuid())
  assetId      String
  type         AssetType          @relation(fields: [typeId], references: [id])
  typeId       String
  notes        String?
  tags         Tag[]
  location     Location?          @relation(fields: [locationId], references: [id])
  locationId   String?
  customFields CustomFieldValue[]
  archived     Boolean            @default(false)
  deleted      DateTime?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  @@map("asset")
}

model AssetType {
  id          String    @id @default(uuid())
  name        String
  displayName String?
  description String?
  brand       String?
  value       Float?
  image       String?
  assets      Asset[]
  category    Category? @relation(fields: [categoryId], references: [id])
  categoryId  String?
  archived    Boolean   @default(false)
  deleted     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("asset_type")
}

model Category {
  id          String      @id @default(uuid())
  name        String
  description String?
  icon        String
  color       String
  assetTypes  AssetType[]
  chilren     Category[]  @relation("Categories")
  parent      Category?   @relation("Categories", fields: [parentId], references: [id])
  parentId    String?
  archived    Boolean     @default(false)
  deleted     DateTime?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("category")
}

model Tag {
  id          String    @id @default(uuid())
  name        String
  description String?
  color       String
  assets      Asset[]
  archived    Boolean   @default(false)
  deleted     DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@map("tag")
}

model Location {
  id        String     @id @default(uuid())
  name      String
  icon      String
  color     String
  assets    Asset[]
  children  Location[] @relation("Locations")
  parent    Location?  @relation("Locations", fields: [parentId], references: [id])
  parentId  String?
  archived  Boolean    @default(false)
  deleted   DateTime?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("location")
}

model CustomFieldValue {
  id            String      @id @default(uuid())
  asset         Asset       @relation(fields: [assetId], references: [id], onDelete: Cascade)
  assetId       String
  customField   CustomField @relation(fields: [customFieldId], references: [id], onDelete: Cascade)
  customFieldId String
  value         Json
}

model CustomField {
  id               String             @id @default(uuid())
  name             String
  type             String
  description      String?
  options          Json?
  archived         Boolean            @default(false)
  deleted          DateTime?
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  CustomFieldValue CustomFieldValue[]

  @@map("custom_field")
}
