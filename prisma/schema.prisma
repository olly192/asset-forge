generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("user")
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("session")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
  @@map("account")
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
  @@map("verification_token")
}

model Asset {
  id           String                  @id @default(uuid())
  assetId      String                  @unique
  type         AssetType               @relation(fields: [typeId], references: [id])
  typeId       String
  notes        String?
  tags         Tag[]
  location     Location?               @relation(fields: [locationId], references: [id])
  locationId   String?
  customFields CustomFieldAssetValue[]
  archived     Boolean                 @default(false)
  deleted      DateTime?
  createdAt    DateTime                @default(now())
  updatedAt    DateTime                @updatedAt

  @@map("asset")
}

model AssetType {
  id             String                 @id @default(uuid())
  name           String
  displayName    String?
  description    String?
  brand          String?
  value          Float?
  images         String[]
  assets         Asset[]
  category       Category?              @relation(fields: [categoryId], references: [id])
  categoryId     String?
  customFields   CustomFieldTypeValue[]
  individualType Boolean                @default(false)
  archived       Boolean                @default(false)
  deleted        DateTime?
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt

  @@map("asset_type")
}

model Category {
  id           String        @id @default(uuid())
  name         String
  description  String?
  icon         String
  color        String
  assetTypes   AssetType[]
  chilren      Category[]    @relation("Categories")
  parent       Category?     @relation("Categories", fields: [parentId], references: [id])
  parentId     String?
  customFields CustomField[]
  archived     Boolean       @default(false)
  deleted      DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("category")
}

model Tag {
  id           String        @id @default(uuid())
  name         String
  description  String?
  color        String
  assets       Asset[]
  customFields CustomField[]
  archived     Boolean       @default(false)
  deleted      DateTime?
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@map("tag")
}

model Location {
  id        String     @id @default(uuid())
  name      String
  icon      String
  color     String
  assets    Asset[]
  children  Location[] @relation("Locations")
  parent    Location?  @relation("Locations", fields: [parentId], references: [id])
  parentId  String?
  archived  Boolean    @default(false)
  deleted   DateTime?
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@map("location")
}

model CustomFieldAssetValue {
  asset         Asset       @relation(fields: [assetId], references: [id], onDelete: Cascade)
  assetId       String
  customField   CustomField @relation(fields: [customFieldId], references: [id], onDelete: Cascade)
  customFieldId String
  value         Json

  @@id(name: "id", [assetId, customFieldId])
}

model CustomFieldTypeValue {
  assetType     AssetType   @relation(fields: [assetTypeId], references: [id], onDelete: Cascade)
  assetTypeId   String
  customField   CustomField @relation(fields: [customFieldId], references: [id], onDelete: Cascade)
  customFieldId String
  value         Json

  @@id(name: "id", [assetTypeId, customFieldId])
}

model CustomField {
  id              String                  @id @default(uuid())
  name            String
  type            String
  description     String?
  options         Json?
  perInstance     Boolean                 @default(false)
  assetValues     CustomFieldAssetValue[]
  typeValues      CustomFieldTypeValue[]
  categoryLimit   Category?               @relation(fields: [categoryLimitId], references: [id])
  categoryLimitId String?
  tagLimit        Tag[]
  archived        Boolean                 @default(false)
  deleted         DateTime?
  createdAt       DateTime                @default(now())
  updatedAt       DateTime                @updatedAt

  @@map("custom_field")
}
